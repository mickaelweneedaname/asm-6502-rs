mod asm;
mod ast;
mod instruction;
mod lexer;
mod linker;
mod parser;

pub fn compile(text: String, origin: u16) -> Vec<u8> {
    let mut asm = asm::Asm::new(text, origin);
    asm.compile()
}

#[cfg(test)]
mod tests {

    use super::*;

    #[test]
    fn test_lda_sta_brk(){
        let text = String::from(r#"LDA #10 ; load 10 into register A
                                          STA $5  ; store register A at address 0x00 + 0x05 = 0x05
                                          BRK"#);
        assert_eq!(compile(text, 0x00), vec![0xA9, 0x0A, 0x85, 0x05, 0x00]);
    }


    #[test]
    fn test_bcc_sta_brk(){
        let text = String::from(
     r#"BCC forward ; C is clear is it should branch
        LDA #10
        STA $55
        BCC end
 forward:
        LDA #33
        STA $55
 end:
        BRK"#);
        assert_eq!(compile(text, 0x00), vec![0x90, 0x06, 0xA9, 0x0A, 0x85, 0x55, 0x90, 0x04, 0xA9, 0x21, 0x85, 0x55, 0x00]);
    }
    
    #[test]
    fn test_beq(){
        let text = String::from(
             r#"BCC forward
            backward:
                LDX #42
                STX $42
                BEQ end
            forward:
                LDX #99
                STX $42
                BEQ backward
            end:
                BRK"#
        );
        assert_eq!(compile(text, 0x00), vec![0x90, 0x06, 0xA2, 0x2A, 0x86, 0x42, 0xF0, 0x06, 0xA2, 0x63, 0x86, 0x42, 0xF0, 0xF4, 0x00]);
    }

    #[test]
    fn parse_asl_a(){
        let prog = String::from(r#"ASL A"#);
        assert_eq!(compile(prog, 0x00), vec![0x0A])
    }


    #[test]
    fn compile_instructions() {
        let text = std::fs::read_to_string("src/script/test.asm").unwrap();
        assert_eq!(compile(text, 0x00), vec![0xA9, 0xC0, 0xAA, 0xE8, 0x00])
    }

    #[test]
    fn compile_snake() {
        println!("#### COMPILE SNAKE");
        let text = std::fs::read_to_string("src/script/snake.asm").unwrap();
        let snake = vec![
            0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9,
            0x02, 0x85, 0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85,
            0x12, 0xa9, 0x0f, 0x85, 0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60,
            0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe, 0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60,
            0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3, 0x06, 0x20, 0x19, 0x07, 0x20, 0x20,
            0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9, 0x77, 0xf0, 0x0d, 0xc9,
            0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60, 0xa9, 0x04,
            0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
            0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04,
            0x85, 0x02, 0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60,
            0x60, 0x20, 0x94, 0x06, 0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d,
            0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07, 0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60,
            0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06, 0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09,
            0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c, 0x35, 0x07, 0x60, 0xa6,
            0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02, 0x4a, 0xb0,
            0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
            0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28,
            0x60, 0xe6, 0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69,
            0x20, 0x85, 0x10, 0xb0, 0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c,
            0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29, 0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35,
            0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60, 0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10,
            0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea, 0xea, 0xca, 0xd0, 0xfb,
            0x60,
        ];
        assert_eq!(compile(text, 0x600), snake);
    }
}
